#pragma once
class FieldListNode;
class ParameterListNode;
class VariableListNode;
class FormalParameterList;
class TypeDeclarationList;
class VariableDeclarationList;
class ConstantDeclarationList;
class ProcedureDeclarationList;
class SelectorNode;
class FieldNode;
class IdentifierListNode;
class ParameterNode;
class ConstantDeclarationNode;
class IfStatementNode;
class NumberConstantNode;
class ProcedureBodyNode;
class ProcedureCallNode;
class ProcedureDeclarationNode;
class ProcedureHeadingNode;
class RecordTypeNode;
class StringConstantNode;
class TypeDeclarationNode;
class TypedIdentifierNode;
class TypeReferenceNode;
class UnaryExpressionNode;
class VariableNode;
class VariableReferenceNode;
class WhileStatementNode;
class BinaryExpressionNode;
class ChainedReferenceNode;
class BasicTypeNode;
class AssignmentNode;
class ArrayTypeNode;
class ArrayReferenceNode;
class ActualParameterNode;
class StatementSequenceNode;
class ModuleNode;
class DeclarationsNode;

class NodeVisitor {

public:
    virtual ~NodeVisitor();

    virtual void visit(const ActualParameterNode* node);
    virtual void visit(const ArrayReferenceNode* node);
    virtual void visit(const ArrayTypeNode* node);
    virtual void visit(const AssignmentNode* node);
    virtual void visit(const BasicTypeNode* node);
    virtual void visit(const BinaryExpressionNode* node);
    virtual void visit(const SelectorNode* node);
    virtual void visit(const ConstantDeclarationNode* node);
    virtual void visit(const ConstantDeclarationList* node);
    virtual void visit(const VariableDeclarationList* node);
    virtual void visit(const TypeDeclarationList* node);
    virtual void visit(const FormalParameterList* node);
    virtual void visit(const DeclarationsNode* node);
    virtual void visit(const FieldNode* node);
    virtual void visit(const IdentifierListNode* node);
    virtual void visit(const IfStatementNode* node);
    virtual void visit(const ModuleNode* node);
    virtual void visit(const NumberConstantNode* node);
    virtual void visit(const ParameterNode* node);
    virtual void visit(const ProcedureBodyNode* node);
    virtual void visit(const ProcedureCallNode* node);
    virtual void visit(const ProcedureDeclarationNode* node);
    virtual void visit(const ProcedureHeadingNode* node);
    virtual void visit(const RecordTypeNode* node);
    virtual void visit(const StatementSequenceNode* node);
    virtual void visit(const StringConstantNode* node);
    virtual void visit(const TypeDeclarationNode* node);
    virtual void visit(const FieldListNode* node);
    virtual void visit(const ParameterListNode* node);
    virtual void visit(const VariableListNode* node);
    virtual void visit(const TypedIdentifierNode* node);
    virtual void visit(const TypeReferenceNode* node);
    virtual void visit(const UnaryExpressionNode* node);
    virtual void visit(const VariableNode* node);
    virtual void visit(const VariableReferenceNode* node);
    virtual void visit(const WhileStatementNode* node);
    virtual void visit(const ProcedureDeclarationList* node);
};
